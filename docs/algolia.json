[{"content":"What is this? This is a guide with examples on how to use the command line utility glurmo.\nWhat is glurmo? glurmo is a command line tool for setting up, running, and managing simulations via Slurm.\nWhy glurmo? In short, I have had to run quite a few simulations over the course of my PhD, and found that writing a simulation manager sped up the process quite a bit. But if you\u0026amp;rsquo;d like a more detailed answer, see below.\nOrganization Running a slurm job can produce quite a bit of output- an .out file from slurm itself, an .Rout file if you\u0026amp;rsquo;re running an R script, a different file for errors (if you so choose), and, of course, the actual artifact of your simulation. glurmo establishes a pre-determined structure for a simulation study, so all of these files are well organized and easy to find.\nReusability This standardized structure is one example of the primary goal of glurmo: more re-usability. Having standardized simulation directory structures makes it easy to write code to summarize simulation results that will work on any simulation with the same type of result. More importantly, glurmo makes it easy to re-use and modify script templates and slurm templates with different settings by tweaking a few values.\nDRY Another primary goal of glurm is to make your simulations DRY-er. By defining the script template, slurm template, and settings in three files that can produce an arbitrary number of simulations, changing a single value can change a setting across an entire simulation (or even set of simulations).\nWhy not job arrays? glurmo is more powerful than using job arrays, and having used both, there are a few reasons why I prefer glurmo.\nReadability glurmo uses a templating engine, so the resulting script and slurm templates are much more readable than if you rely on the index of a job array.\nEase of use I am almost certainly biased here, but I find glurmo easier to use than job arrays, particularly when it comes to cancelling jobs. With glurmo, you can run a …","date":1724706893,"description":"","lastmod":"2024-08-26T17:14:53-04:00","objectID":"3976528693a0108357f4928017600865","permalink":"https://nateosher.github.io/glurmo-examples/","publishdate":"2024-08-26T17:14:53-04:00","title":"Introduction"},{"content":"A first look at glurmo I will say up front here that this first example is extremely contrived, and might seem silly to you for several reasons. However, the purpose of this first section is not to show you a killer example of glurmo. Rather, this example will introduce you to the basic mechanics of glurmo. Please don\u0026amp;rsquo;t skip this section- the things we go over here will be the foundation for understanding future examples.\nThe example The directory we\u0026amp;rsquo;ll be working with for this example can be found here in the simple-lm directory. Right now, this should only contain one directory (.glurmo) with three files (script_template, settings.json, and slurm_template).\n","date":1725274976,"description":"","lastmod":"2024-09-02T07:02:56-04:00","objectID":"0cf54491c9c5ff8e8227b19050b08c8c","permalink":"https://nateosher.github.io/glurmo-examples/a_first_pass/","publishdate":"2024-09-02T07:02:56-04:00","title":"A first pass"},{"content":"Conclusion This has been a fairly basic introduction to glurmo, and hopefully it has made some of the benefits clear to you:\nglurmo makes it easy to keep your simulations and results organized glurmo makes it easy to re-use various aspects of your simulations in future simulations glurmo helps you avoid worrying about the nitty-gritty paths you use by giving you access to script specific variables However, if you\u0026amp;rsquo;ve run simulation studies, this all probably raises a pretty natural question: what if you want to vary parameters in the simulation? You could do this with the index script specific variable we introduced, but it would 1) be kind of messy and 2) might make you wonder why you shouldn\u0026amp;rsquo;t just use job arrays. In the next section, we\u0026amp;rsquo;ll discuss a powerful feature of glurmo to solve this: parameter vectors.\n","date":1725288296,"description":"","lastmod":"2024-09-02T10:44:56-04:00","objectID":"7a00bd8cab2897e459d53a6d64af59be","permalink":"https://nateosher.github.io/glurmo-examples/a_first_pass/conclusion/","publishdate":"2024-09-02T10:44:56-04:00","title":"Conclusion"},{"content":"Running the simulations Now, for the moment you\u0026amp;rsquo;ve been waiting for (I assume?): running the simulation study. To run all the simulations, run:\n$ glurmo -r 5 . This will submit all five simulations. Note that you can replace \u0026amp;ldquo;5\u0026amp;rdquo; with any positive number, and glurmo will run that many (or at least the maximum number in the study). Note that glurmo will keep track of what simulations have and have not been run; if you run the same command above again, glurmo will submit no jobs, since all jobs will either be running or completed.\nThese scripts are quite simple, and should run basically instantaneously (though of course this depends on the slurm load). Once the scripts have completed, we can look at what has changed in the sub-directories.\nresults The results folder should now have 5 files: results___0.RData through results___4.RData. These are the results we saved from each of the respective scripts.\nslurm_out This directory contains the output generated by slurm for each simulation. Per our slurm file, there will be two files per simulation: output___{index} and output___{index}.Rout. The output___{index} files should be empty, but the .Rout files show what code was run and how long it took. They will also show errors when they occur, which is extremely useful for debugging simulations.\nslurm_errors slurm_errors contains the error output for each simulation\u0026amp;rsquo;s slurm script. Each output file will be of the form error___{index}. However, since nothing went wrong in these simulations, all files should be empty.\n","date":1725287247,"description":"","lastmod":"2024-09-02T10:27:27-04:00","objectID":"ee254f0e504ffafcd80f22ef87908da0","permalink":"https://nateosher.github.io/glurmo-examples/a_first_pass/running/","publishdate":"2024-09-02T10:27:27-04:00","title":"Running"},{"content":"Setting up the simulation In order to run the simulations, we must set up the directory. This entails glurmo creating the actual scripts and slurm scripts, as well as setting up the general directory structure. To set up the directory, ensure your current directory is simple-lm, and then run:\n$ glurmo -s . Note that you can also run setup from a different directory, as the final argument is simply the path to whichever directory you\u0026amp;rsquo;d like to run glurmo on. If you run ls, you should see the following new sub-directories: results, scripts, slurm, slurm_errors, and slurm_out. We\u0026amp;rsquo;ll go over each directory in turn.\nresults, slurm_errors, and slurm_out These directories will store various outputs from your simulation studies. Right now, they should be empty- we\u0026amp;rsquo;ll discuss these more in the next section, though you can probably guess what will be stored in each one.\nscripts The scripts directory is a bit more interesting. As of now, it should contain five scripts: script_0.R through script_4.R. Let\u0026amp;rsquo;s take a look at script_2.R:\nset.seed(24601 + 2) #---------------------------------- # General settings #---------------------------------- N = 100 beta_0 = 1 beta_1 = 2 #---------------------------------- # X #---------------------------------- X_sigma = 2 X_mu = 0 X = rnorm(N, X_mu, X_sigma) #---------------------------------- # y #---------------------------------- epsilon_sigma = 1 epsilon = rnorm(N, 0, epsilon_sigma) y = beta_0 + beta_1 * X + epsilon #---------------------------------- # Model #---------------------------------- sim_data = data.frame(y = y, X = X) lm_fit = lm(y ~ X, data = sim_data) saveRDS(lm_fit, \u0026amp;#34;/home/oshern/Projects/glurmo-examples/simple-lm/results/results___2.RData\u0026amp;#34;) As promised, the templating markdown has been replaced with the parameters. Further, note that the {{.index}} markdown was replaced with \u0026amp;ldquo;2\u0026amp;rdquo;, since this is the second script. And similarly, the {{.results_path}} markdown has been replaced by a …","date":1725285771,"description":"","lastmod":"2024-09-02T10:02:51-04:00","objectID":"bf99402d5e5290def842dbd92466a4fc","permalink":"https://nateosher.github.io/glurmo-examples/a_first_pass/setting_up/","publishdate":"2024-09-02T10:02:51-04:00","title":"Setting up"},{"content":"Overview At the core of every glurmo simulation there is a settings directory, .glurmo, which contains three configuration files: settings.json, script_template, and slurm_template. We will start by going through each of these files in turn.\nsettings.json settings.json is the file in which you specify the general settings of your simulation as well as the specific parameters for the script and the slurm script. We will go over each of these in turn, but first, an important note: you cannot use comments in settings.json! Unfortunately this seems to break the parser shipped with go- I\u0026amp;rsquo;m hoping to fix this when I have time, or simply switch to a different file format like .toml. Sorry about this!\nGeneral settings General settings are stored under the \u0026amp;ldquo;general\u0026amp;rdquo; sub-object of the overall settings object. Right now, there are only two things you need to specify here: the number of simulations (\u0026amp;ldquo;n_sims\u0026amp;rdquo;) and the simulation id (\u0026amp;ldquo;id\u0026amp;rdquo;). The \u0026amp;ldquo;id\u0026amp;rdquo; setting should be unique, since this is how glurmo identifies simulations associated with this studies. If you re-use ids, bad things could happen if you try to cancel jobs.\nScript settings Script settings are stored under the \u0026amp;ldquo;templates\u0026amp;rdquo; sub-object of the overall settings object. Entries here represent parameters that you may want to vary across your simulation scripts or slurm scripts. For example, this settings file specifies the number of data points to simulate (N) as well as the number of CPUs to use in the simulation study, among other things.\nThere are two settings that must be specified under script settings: \u0026amp;ldquo;script_extension\u0026amp;rdquo; and \u0026amp;ldquo;result_extension.\u0026amp;rdquo; The first tells glurmo what kind of scripts you\u0026amp;rsquo;re running. In this case, we\u0026amp;rsquo;re running our simulations with R, so we\u0026amp;rsquo;re using the \u0026amp;ldquo;.R\u0026amp;rdquo; extension. The second tells glurmo the file extension for the results, i.e. how we\u0026amp;rsquo;ll store the results of a …","date":1724707632,"description":"","lastmod":"2024-08-26T17:27:12-04:00","objectID":"bf40d9e0f7dea3a3c9a77d408460ad69","permalink":"https://nateosher.github.io/glurmo-examples/a_first_pass/settings_files/","publishdate":"2024-08-26T17:27:12-04:00","title":"Configuration files"},{"content":"Installation Go glurmo is written in Go, so in order to install it you\u0026amp;rsquo;ll have to download and install the Go toolchain. You can install go by following the previous link and following the instructions.\nYou can ensure Go is properly installed by running the following command in your terminal:\n$ go version when I do this, I get the output Go version go1.21.6 darwin/arm64; you should see something along these lines.\nglurmo Once you have Go working, installing glurmo is simple. Just run the following command:\n$ go install github.com/nateosher/glurmo@latest To make sure this worked, run:\n$ glurmo -h This should show the glurmo help page.\nExamples All of the examples we will go through can be found in this repository. I would recommend cloning this onto a server with slurm so you can actually run the examples as you go.\n","date":1725276812,"description":"","lastmod":"2024-09-02T07:33:32-04:00","objectID":"e72b13d0a911312e8d126eed8c9b47f3","permalink":"https://nateosher.github.io/glurmo-examples/getting_started/","publishdate":"2024-09-02T07:33:32-04:00","title":"Getting started"},{"content":"Coming soon ","date":1725289378,"description":"","lastmod":"2024-09-02T11:02:58-04:00","objectID":"b56368354523e9fa65d33b46c43d5f3a","permalink":"https://nateosher.github.io/glurmo-examples/multiple_parameter_vectors/","publishdate":"2024-09-02T11:02:58-04:00","title":"Multiple parameter vectors"},{"content":"Introduction to parameter vectors The point of most simulations is to see how a model behaves across different parameter settings. You can accomplish this using what we have learned in glurmo so far, but it wouldn\u0026amp;rsquo;t be pretty. You\u0026amp;rsquo;d have to either create a new simulation for each setting, or use the index script variable to set parameter settings manually. It would be nice if there was a simpler way to accomplish this using glurmo.\nYou\u0026amp;rsquo;ll be happy to know that there is, in fact, a simpler way to accomplish this using glurmo: parameter vectors. This part of the tutorial will focus on the varied-lm directory, which (in case you\u0026amp;rsquo;ve skipped ahead) can be found here.\n","date":1725288692,"description":"","lastmod":"2024-09-02T10:51:32-04:00","objectID":"8644b4a9f4bafa943446013c04d1985a","permalink":"https://nateosher.github.io/glurmo-examples/parameter_vectors/","publishdate":"2024-09-02T10:51:32-04:00","title":"Parameter vectors"},{"content":"Coming soon ","date":1725289393,"description":"","lastmod":"2024-09-02T11:03:13-04:00","objectID":"9fba9e7b65e6b0636ff522ccbc65aaaa","permalink":"https://nateosher.github.io/glurmo-examples/templating_logic/","publishdate":"2024-09-02T11:03:13-04:00","title":"Templating logic"}]