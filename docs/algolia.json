[{"content":"What is this? This is a guide with examples on how to use the command line utility glurmo. It is currently incomplete. While I am working to flesh it out, I think there is still enough here to be useful.\nWhat is glurmo? glurmo is a command line tool for setting up, running, and managing simulations via Slurm.\nWhy glurmo? In short, I have had to run quite a few simulations over the course of my PhD, and found that writing a simulation manager sped up the process quite a bit. But if you\u0026amp;rsquo;d like a more detailed answer, see below.\nOrganization Running a slurm job can produce quite a bit of output- an .out file from slurm itself, an .Rout file if you\u0026amp;rsquo;re running an R script, a different file for errors (if you so choose), and, of course, the actual artifact of your simulation. glurmo establishes a pre-determined structure for a simulation study, so all of these files are well organized and easy to find.\nReusability This standardized structure is one example of the primary goal of glurmo: more re-usability. Having standardized simulation directory structures makes it easy to write code to summarize simulation results that will work on any simulation with the same type of result. More importantly, glurmo makes it easy to re-use and modify script templates and slurm templates with different settings by tweaking a few values.\nDRY Another primary goal of glurm is to make your simulations DRY-er. By defining the script template, slurm template, and settings in three files that can produce an arbitrary number of simulations, changing a single value can change a setting across an entire simulation (or even set of simulations).\nWhy not job arrays? glurmo is more powerful than using job arrays, and having used both, there are a few reasons why I prefer glurmo.\nReadability glurmo uses a templating engine, so the resulting script and slurm templates are much more readable than if you rely on the index of a job array.\nEase of use I am almost certainly biased here, but I …","date":1724706893,"description":"","lastmod":"2024-08-26T17:14:53-04:00","objectID":"3976528693a0108357f4928017600865","permalink":"https://nateosher.github.io/glurmo-examples/","publishdate":"2024-08-26T17:14:53-04:00","title":"Introduction"},{"content":"A first look at glurmo I will say up front here that this first example is extremely contrived, and might seem silly to you for several reasons. However, the purpose of this first section is not to show you a killer example of glurmo. Rather, this example will introduce you to the basic mechanics of glurmo. Please don\u0026amp;rsquo;t skip this section- the things we go over here will be the foundation for understanding future examples.\nThe example The directory we\u0026amp;rsquo;ll be working with for this example can be found here in the simple-lm directory. Right now, this should only contain one directory (.glurmo) with three files (script_template, settings.json, and slurm_template).\n","date":1725274976,"description":"","lastmod":"2024-09-02T07:02:56-04:00","objectID":"0cf54491c9c5ff8e8227b19050b08c8c","permalink":"https://nateosher.github.io/glurmo-examples/a_first_pass/","publishdate":"2024-09-02T07:02:56-04:00","title":"A first pass"},{"content":"Conclusion This has been a fairly basic introduction to glurmo, and hopefully it has made some of the benefits clear to you:\nglurmo makes it easy to keep your simulations and results organized glurmo makes it easy to re-use various aspects of your simulations in future simulations glurmo helps you avoid worrying about the nitty-gritty paths you use by giving you access to script specific variables However, if you\u0026amp;rsquo;ve run simulation studies, this all probably raises a pretty natural question: what if you want to vary parameters in the simulation? You could do this with the index script specific variable we introduced, but it would 1) be kind of messy and 2) might make you wonder why you shouldn\u0026amp;rsquo;t just use job arrays. In the next section, we\u0026amp;rsquo;ll discuss a powerful feature of glurmo to solve this: parameter vectors.\n","date":1725288296,"description":"","lastmod":"2024-09-02T10:44:56-04:00","objectID":"7a00bd8cab2897e459d53a6d64af59be","permalink":"https://nateosher.github.io/glurmo-examples/a_first_pass/conclusion/","publishdate":"2024-09-02T10:44:56-04:00","title":"Conclusion"},{"content":"Running the simulations Now, for the moment you\u0026amp;rsquo;ve been waiting for (I assume?): running the simulation study. To run all the simulations, run:\n$ glurmo -r 5 . This will submit all five simulations. Note that you can replace \u0026amp;ldquo;5\u0026amp;rdquo; with any positive number, and glurmo will run that many (or at least the maximum number in the study). Note that glurmo will keep track of what simulations have and have not been run; if you run the same command above again, glurmo will submit no jobs, since all jobs will either be running or completed.\nThese scripts are quite simple, and should run basically instantaneously (though of course this depends on the slurm load). Once the scripts have completed, we can look at what has changed in the sub-directories.\nresults The results folder should now have 5 files: results___0.RData through results___4.RData. These are the results we saved from each of the respective scripts.\nslurm_out This directory contains the output generated by slurm for each simulation. Per our slurm file, there will be two files per simulation: output___{index} and output___{index}.Rout. The output___{index} files should be empty, but the .Rout files show what code was run and how long it took. They will also show errors when they occur, which is extremely useful for debugging simulations.\nslurm_errors slurm_errors contains the error output for each simulation\u0026amp;rsquo;s slurm script. Each output file will be of the form error___{index}. However, since nothing went wrong in these simulations, all files should be empty.\n","date":1725287247,"description":"","lastmod":"2024-09-02T10:27:27-04:00","objectID":"ee254f0e504ffafcd80f22ef87908da0","permalink":"https://nateosher.github.io/glurmo-examples/a_first_pass/running/","publishdate":"2024-09-02T10:27:27-04:00","title":"Running"},{"content":"Setting up the simulation In order to run the simulations, we must set up the directory. This entails glurmo creating the actual scripts and slurm scripts, as well as setting up the general directory structure. To set up the directory, ensure your current directory is simple-lm, and then run:\n$ glurmo -s . Note that you can also run setup from a different directory, as the final argument is simply the path to whichever directory you\u0026amp;rsquo;d like to run glurmo on. If you run ls, you should see the following new sub-directories: results, scripts, slurm, slurm_errors, and slurm_out. We\u0026amp;rsquo;ll go over each directory in turn.\nresults, slurm_errors, and slurm_out These directories will store various outputs from your simulation studies. Right now, they should be empty- we\u0026amp;rsquo;ll discuss these more in the next section, though you can probably guess what will be stored in each one.\nscripts The scripts directory is a bit more interesting. As of now, it should contain five scripts: script_0.R through script_4.R. Let\u0026amp;rsquo;s take a look at script_2.R:\nset.seed(24601 + 2) #---------------------------------- # General settings #---------------------------------- N = 100 beta_0 = 1 beta_1 = 2 #---------------------------------- # X #---------------------------------- X_sigma = 2 X_mu = 0 X = rnorm(N, X_mu, X_sigma) #---------------------------------- # y #---------------------------------- epsilon_sigma = 1 epsilon = rnorm(N, 0, epsilon_sigma) y = beta_0 + beta_1 * X + epsilon #---------------------------------- # Model #---------------------------------- sim_data = data.frame(y = y, X = X) lm_fit = lm(y ~ X, data = sim_data) saveRDS(lm_fit, \u0026amp;#34;/home/oshern/Projects/glurmo-examples/simple-lm/results/results___2.RData\u0026amp;#34;) As promised, the templating markdown has been replaced with the parameters. Further, note that the {{.index}} markdown was replaced with \u0026amp;ldquo;2\u0026amp;rdquo;, since this is the second script. And similarly, the {{.results_path}} markdown has been replaced by a …","date":1725285771,"description":"","lastmod":"2024-09-02T10:02:51-04:00","objectID":"bf99402d5e5290def842dbd92466a4fc","permalink":"https://nateosher.github.io/glurmo-examples/a_first_pass/setting_up/","publishdate":"2024-09-02T10:02:51-04:00","title":"Setting up"},{"content":"Overview At the core of every glurmo simulation there is a settings directory, .glurmo, which contains three configuration files: settings.json, script_template, and slurm_template. We will start by going through each of these files in turn.\nsettings.json settings.json is the file in which you specify the general settings of your simulation as well as the specific parameters for the script and the slurm script. We will go over each of these in turn, but first, an important note: you cannot use comments in settings.json! Unfortunately this seems to break the parser shipped with go- I\u0026amp;rsquo;m hoping to fix this when I have time, or simply switch to a different file format like .toml. Sorry about this!\nGeneral settings General settings are stored under the \u0026amp;ldquo;general\u0026amp;rdquo; sub-object of the overall settings object. Right now, there are only two things you need to specify here: the number of simulations (\u0026amp;ldquo;n_sims\u0026amp;rdquo;) and the simulation id (\u0026amp;ldquo;id\u0026amp;rdquo;). The \u0026amp;ldquo;id\u0026amp;rdquo; setting should be unique, since this is how glurmo identifies simulations associated with this studies. If you re-use ids, bad things could happen if you try to cancel jobs.\nScript settings Script settings are stored under the \u0026amp;ldquo;templates\u0026amp;rdquo; sub-object of the overall settings object. Entries here represent parameters that you may want to vary across your simulation scripts or slurm scripts. For example, this settings file specifies the number of data points to simulate (N) as well as the number of CPUs to use in the simulation study, among other things.\nThere are two settings that must be specified under script settings: \u0026amp;ldquo;script_extension\u0026amp;rdquo; and \u0026amp;ldquo;result_extension.\u0026amp;rdquo; The first tells glurmo what kind of scripts you\u0026amp;rsquo;re running. In this case, we\u0026amp;rsquo;re running our simulations with R, so we\u0026amp;rsquo;re using the \u0026amp;ldquo;.R\u0026amp;rdquo; extension. The second tells glurmo the file extension for the results, i.e. how we\u0026amp;rsquo;ll store the results of a …","date":1724707632,"description":"","lastmod":"2024-08-26T17:27:12-04:00","objectID":"bf40d9e0f7dea3a3c9a77d408460ad69","permalink":"https://nateosher.github.io/glurmo-examples/a_first_pass/settings_files/","publishdate":"2024-08-26T17:27:12-04:00","title":"Configuration files"},{"content":"Conclusion Thanks for sticking with the tutorial until the end! I hope I\u0026amp;rsquo;ve convinced you that glurmo is a worthwhile project.\nNext steps There is still more to learn about glurmo, and the things you can do with the templating engine. For example, everything I showed in the previous section can be done in scripts as well, since both are templated in the same way. This tutorial has also not covered how to manage your simulations, though I plan to add that in future updates. Additionally, there are also features of glurmo that I have not added yet but would like to in the future. Stay tuned!\nQuestions? Bugs? If you have any questions, feel free to email me! You can find my email at the bottom of the page here. If you find any bugs, please open an issue in the glurmo repository.\n","date":1725718541,"description":"","lastmod":"2024-09-07T10:15:41-04:00","objectID":"2e561260efcbcf62dc177267cbd38668","permalink":"https://nateosher.github.io/glurmo-examples/conclusion/","publishdate":"2024-09-07T10:15:41-04:00","title":"Conclusion"},{"content":"Installation Go glurmo is written in Go, so in order to install it you\u0026amp;rsquo;ll have to download and install the Go toolchain. You can install go by following the previous link and following the instructions.\nYou can ensure Go is properly installed by running the following command in your terminal:\n$ go version when I do this, I get the output Go version go1.21.6 darwin/arm64; you should see something along these lines.\nglurmo Once you have Go working, installing glurmo is simple. Just run the following command:\n$ go install github.com/nateosher/glurmo@latest To make sure this worked, run:\n$ glurmo -h This should show the glurmo help page.\nExamples All of the examples we will go through can be found in this repository. I would recommend cloning this onto a server with slurm so you can actually run the examples as you go.\n","date":1725276812,"description":"","lastmod":"2024-09-02T07:33:32-04:00","objectID":"e72b13d0a911312e8d126eed8c9b47f3","permalink":"https://nateosher.github.io/glurmo-examples/getting_started/","publishdate":"2024-09-02T07:33:32-04:00","title":"Getting started"},{"content":"Using multiple parameter vectors When running a simulation, we rarely only want to vary one parameter. In general, we\u0026amp;rsquo;ll vary several, and examine the results under all possible combinations. Thus, parameter vectors are really most useful when used in different parameters in a given model.\nWhile this pretty much works exactly how you would hope, we\u0026amp;rsquo;ll still go through an example in this section just to hammer out the details.This part of the tutorial will focus on the varied-lm-2 directory, which (in case you\u0026amp;rsquo;ve skipped ahead) can be found here.\n","date":1725289378,"description":"","lastmod":"2024-09-02T11:02:58-04:00","objectID":"b56368354523e9fa65d33b46c43d5f3a","permalink":"https://nateosher.github.io/glurmo-examples/multiple_parameter_vectors/","publishdate":"2024-09-02T11:02:58-04:00","title":"Multiple parameter vectors"},{"content":"Running the simulation Finally, we will run the simulation in the same way as we did previously:\n$ glurmo -r 5 . You should see the following message:\nSuccessfully submitted 45 jobs Just to be explicit: we have submitted five jobs per setting, and there are three settings for beta_1 times three settings for N for a total of nine settings. The output, as always, will be saved to the results folder of each simulation subdirectory.\n","date":1725713218,"description":"","lastmod":"2024-09-07T08:46:58-04:00","objectID":"38993b43369b98c46f7809a926f7d1b3","permalink":"https://nateosher.github.io/glurmo-examples/multiple_parameter_vectors/running/","publishdate":"2024-09-07T08:46:58-04:00","title":"Running"},{"content":"Multiple parameter vectors If we look at .glurmo/settings.json we will see a new change in addition to the one from the previous section:\n... \u0026amp;#34;N\u0026amp;#34; : \u0026amp;#34;@[100, 200, 300]\u0026amp;#34;, \u0026amp;#34;beta_0\u0026amp;#34; : \u0026amp;#34;1\u0026amp;#34;,\t\u0026amp;#34;beta_1\u0026amp;#34; : \u0026amp;#34;@[1, 2, 3]\u0026amp;#34;, ... Now, in addition to varying beta_1, we\u0026amp;rsquo;ll be varying the sample size N as well.\nSetting up We can set up this simulation in exactly the same way as before. As always, ensure you are in the simulation directory and run:\n$ glurmo -s . You will see substantially more messages showing the progress of the setup, though this should not take too long. If you look at the contents of varied-lm-2, you should now see three subdirectories: N_100, N_200, and N_300. These are exactly analogous to the subdirectories that were set up in the previous example.\nLet\u0026amp;rsquo;s check the settings file in N_100, which can be found in N_100/.glurmo/settings.json. Specifically, let\u0026amp;rsquo;s look at the entry for beta_1:\n... \u0026amp;#34;beta_1\u0026amp;#34;: \u0026amp;#34;@[1, 2, 3]\u0026amp;#34; ... This again speaks to the recursive nature of glurmo directories: each setting for N is just a glurmo simulation with N set to a specific value, and aside from that all of the same parameter settings (including parameter vectors).\nIt is worth emphasizing that by changing a single line in our settings file (not including the simulation id), we went from having three simulation settings to nine. This is one of the really nice things about .glurmo: it makes it easy to alter and scale up simulations as necessary.\n","date":1725711928,"description":"","lastmod":"2024-09-07T08:25:28-04:00","objectID":"7f16309042e1d630a11a5e5834522f43","permalink":"https://nateosher.github.io/glurmo-examples/multiple_parameter_vectors/setting_up/","publishdate":"2024-09-07T08:25:28-04:00","title":"Setting up"},{"content":"Introduction to parameter vectors The point of most simulations is to see how a model behaves across different parameter settings. You can accomplish this using what we have learned in glurmo so far, but it wouldn\u0026amp;rsquo;t be pretty. You\u0026amp;rsquo;d have to either create a new simulation for each setting, or use the index script variable to set parameter settings manually. And at that point, why not just use job arrays? It would be nice if there was a simpler way to accomplish this using glurmo.\nYou\u0026amp;rsquo;ll be happy to know that there is, in fact, a simpler way to accomplish this using glurmo: parameter vectors. This part of the tutorial will focus on the varied-lm directory, which (in case you\u0026amp;rsquo;ve skipped ahead) can be found here.\n","date":1725288692,"description":"","lastmod":"2024-09-02T10:51:32-04:00","objectID":"8644b4a9f4bafa943446013c04d1985a","permalink":"https://nateosher.github.io/glurmo-examples/parameter_vectors/","publishdate":"2024-09-02T10:51:32-04:00","title":"Parameter vectors"},{"content":"Introducing parameter vectors If you open varied-lm/.glurmo/settings.json, you\u0026amp;rsquo;ll notice that it\u0026amp;rsquo;s more or less the same as the last settings file, with one exception:\n... \u0026amp;#34;beta_1\u0026amp;#34; : \u0026amp;#34;@[1, 2, 3]\u0026amp;#34;, ... This parameter uses a parameter vector. A parameter vector has the syntax @[param 1, param 2, ... param n], and serve a special purpose in glurmo. Each parameter in the vector represents a distinct simulation setting, and a separate simulation directory will be made for it. So rather than representing five simulations (note that n_sims is still set to 5), this single file now encodes 15 simulations: 5 where beta_1 is equal to 1, five where it\u0026amp;rsquo;s equal to two, and five where it\u0026amp;rsquo;s equal to three.\nSetting up the simulation study Despite this change, setting up the simulation is the same as before. Just make sure you\u0026amp;rsquo;re in glurmo-examples/varied-lm and run:\n$ glurmo -s . You should see three messages, along the lines of:\nCreating /path/to/dir/glurmo-examples/varied-lm/beta_1_1 ... Creating /path/to/dir/glurmo-examples/varied-lm/beta_1_2 ... Creating /path/to/dir/glurmo-examples/varied-lm/beta_1_3 ... Now if you look at the contents of the varied-lm directory, you should see three new subdirectories: beta_1_1, beta_1_2, and beta_1_3. Each of these corresponds to one of the settings in the parameter vectors for beta_1; they are named by taking the parameter being varied and tacking on an underscore along with the parameter value.\nExamining subdirectories Let\u0026amp;rsquo;s take a look at beta_1_1. If you examine the contents using ls -a to show hidden files, you should see six subdirectories: .glurmo, results, scripts, slurm, slurm_errors, slurm_out. In other words, this subdirectory just has a standard glurmo directory setup, complete with a .glurmo directory! If you examine the settings file in that .glurmo directory, you\u0026amp;rsquo;ll notice that it\u0026amp;rsquo;s identical to the original (as are the slurm and script templates), but the …","date":1725708459,"description":"","lastmod":"2024-09-07T07:27:39-04:00","objectID":"fdb59c686f903f8d9f1365e3d530626e","permalink":"https://nateosher.github.io/glurmo-examples/parameter_vectors/first_glance/","publishdate":"2024-09-07T07:27:39-04:00","title":"Setting up"},{"content":"Running the simulation There are two ways we could run this simulation. Since all three subdirectories are themselves complete glurmo directories, we could simply go to each of them in turn in whatever order we choose and run them sequentially. However, we can also run them all in parallel from the varied-lm directory.\nTo do so, ensure you are in the varied-lm subdirectory, and simply run the command:\n$ glurmo -r 5 . After some amount of time, you should get the following message:\n$ Successfully submitted 15 jobs Why 15 when we only submitted 5? When you submit jobs in a glurmo directory that contains glurmo subdirectories, the number of jobs you submit will be submitted in all of those subdirectories. Since there are three glurmo subdirectories, this command submitted a total of 15 jobs.\nNext steps Hopefully this raises a pretty natural question for you: what happens if you have multiple parameters with parameter vectors? We\u0026amp;rsquo;ll cover that in the next section, but in short, exactly what you\u0026amp;rsquo;d expect.\n","date":1725710366,"description":"","lastmod":"2024-09-07T07:59:26-04:00","objectID":"cfe8d0f48a7974249a6af41e26ac8469","permalink":"https://nateosher.github.io/glurmo-examples/parameter_vectors/running_simulation/","publishdate":"2024-09-07T07:59:26-04:00","title":"Running"},{"content":"Using the templating engine So far everything we\u0026amp;rsquo;ve covered is theoretically possible with slurm job arrays. However, in this section, we\u0026amp;rsquo;re going to cover something that glurmo is uniquely capable of: using templating logic.\nTo offer a motivating example, we have covered how to run a variety of simulations using parameter vectors. However, in real simulation studies, different parameter combinations may require different computational resources, in terms of memory, CPUs, and time. One solution to this problem is to simply request the maximum necessary resources for all simulations, but this is not ideal. If some jobs require radically more resources, then the less resource intensive settings will take longer than they have to to be scheduled, and will potentially prevent other jobs from being scheduled that could realistically be run at the same time. Ideally, we\u0026amp;rsquo;d like to only request the minimum resources we need by setting. glurmo can accomplish this using templating logic, we will discuss in the next section.\nThis part of the tutorial will focus on the conditional-lm subdirectory, which can be found here.\n","date":1725289393,"description":"","lastmod":"2024-09-02T11:03:13-04:00","objectID":"9fba9e7b65e6b0636ff522ccbc65aaaa","permalink":"https://nateosher.github.io/glurmo-examples/templating_logic/","publishdate":"2024-09-02T11:03:13-04:00","title":"Templating logic"},{"content":"Running the simulation For the sake of completeness, let\u0026amp;rsquo;s run the simulation to make sure everything worked as expected:\n$ glurmo -r 5 . The results should be exactly the same as previous simulations, and you can find them in the same places.\n","date":1725718301,"description":"","lastmod":"2024-09-07T10:11:41-04:00","objectID":"1fdc7060cb5103c8be90ae59691eac21","permalink":"https://nateosher.github.io/glurmo-examples/templating_logic/running/","publishdate":"2024-09-07T10:11:41-04:00","title":"Running"},{"content":"Templating logic Suppose we decide that only one gigabyte of memory is pushing it for the simulations where N is set to 300. We could simply change the memory parameter to \u0026amp;ldquo;2g\u0026amp;rdquo;, but as discussed in the introduction, this might not be ideal. It would be nice if we could set all the settings where N is less than 300 to run with 1 gigabyte of RAM, and those where N is 300 (and eventually greater) to run with 2 gigabytes of RAM. We can accomplish this using templating logic.\nSome background glurmo uses Golang\u0026amp;rsquo;s templating engine, which is extremely powerful. While it is worth reading through the previously linked page to get a sense of what it is capable of, its most important capability for our purposes is setting the value of a certain templating parameter based on a condition.\nExample To see what this looks like in practice, check the slurm template in conditional-lm/.glurmo/slurm_template. You\u0026amp;rsquo;ll notice that line 6 looks quite a bit different than it did previously:\n#SBATCH --mem={{if lt (atoi .N) 300}}{{.low_memory}}{{else}}{{.high_memory}}{{end}} There\u0026amp;rsquo;s quite a bit going on here, so we\u0026amp;rsquo;ll go over it in parts.\nFirst, the broad structure on the right side of the equal sign is that of an if statement:\n{{if condition}} {{.param_1}} {{else}} {{.param_2}} {{end}} If the condition is true, this expression takes the value of param_1; otherwise, it takes the value of param_2.\nThe condition itself looks like this:\nlt (atoi .N) 300 This highlights two strange things about Golang\u0026amp;rsquo;s templating logic. The first is that rather than using the typical symbols (\u0026amp;lt;, \u0026amp;gt;, etc.), it uses functions: lt for less than, gt for greater than, and so on. You can find the full details here. The second is that functions are called as follows:\nfunc-name arg1 arg2 ... We can therefore see that this line is checking that the result of the expression (atoi .N) is less than 300. Finally, note that atoi is itself a function that converts a string to an …","date":1725715153,"description":"","lastmod":"2024-09-07T09:19:13-04:00","objectID":"5b059d52b08ef26fb29d64e242b4a56c","permalink":"https://nateosher.github.io/glurmo-examples/templating_logic/setting_up/","publishdate":"2024-09-07T09:19:13-04:00","title":"Setting up"}]